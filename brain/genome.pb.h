// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_genome_2eproto__INCLUDED
#define PROTOBUF_genome_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace Elysia {
namespace Genome {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_genome_2eproto();
void protobuf_AssignDesc_genome_2eproto();
void protobuf_ShutdownFile_genome_2eproto();

class Protein;
class Proteins;
class TemporalBoundingBox;
class Condition;
class ConditionClause;
class Gene;
class Chromosome;
class Genome;

enum Condition_Test {
  Condition_Test_ANY_CONCENTRATION = 0,
  Condition_Test_CONCENTRATION_GREATER = 1,
  Condition_Test_CONCENTRATION_LESS = 2,
  Condition_Test_NO_CONCENTRATION = 3
};
bool Condition_Test_IsValid(int value);
const Condition_Test Condition_Test_Test_MIN = Condition_Test_ANY_CONCENTRATION;
const Condition_Test Condition_Test_Test_MAX = Condition_Test_NO_CONCENTRATION;

const ::google::protobuf::EnumDescriptor* Condition_Test_descriptor();
inline const ::std::string& Condition_Test_Name(Condition_Test value) {
  return ::google::protobuf::internal::NameOfEnum(
    Condition_Test_descriptor(), value);
}
inline bool Condition_Test_Parse(
    const ::std::string& name, Condition_Test* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Condition_Test>(
    Condition_Test_descriptor(), name, value);
}
enum Effect {
  CUSTOM = 0,
  GROW_LEAF = 1,
  GROW_NEURON = 2,
  BASE_BRANCHINESS = 3,
  TIP_BRANCHINESS = 4,
  BASE_THRESHOLD = 5,
  TIP_THRESHOLD = 6,
  TREE_DEPTH = 7,
  FIRING_TIME = 8,
  RECEPTIVITY_TIME = 9,
  LEARNING_RESPONSIVENESS = 12,
  INHIBITION = 13,
  AGGRESSIVE_DEVELOPMENT = 14
};
bool Effect_IsValid(int value);
const Effect Effect_MIN = CUSTOM;
const Effect Effect_MAX = AGGRESSIVE_DEVELOPMENT;

const ::google::protobuf::EnumDescriptor* Effect_descriptor();
inline const ::std::string& Effect_Name(Effect value) {
  return ::google::protobuf::internal::NameOfEnum(
    Effect_descriptor(), value);
}
inline bool Effect_Parse(
    const ::std::string& name, Effect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Effect>(
    Effect_descriptor(), name, value);
}
// ===================================================================

class Protein : public ::google::protobuf::Message {
 public:
  Protein();
  virtual ~Protein();
  
  Protein(const Protein& from);
  
  inline Protein& operator=(const Protein& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Protein& default_instance();
  void Swap(Protein* other);
  
  // implements Message ----------------------------------------------
  
  Protein* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Protein& from);
  void MergeFrom(const Protein& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Elysia.Genome.Effect protein_code = 1;
  inline bool has_protein_code() const;
  inline void clear_protein_code();
  static const int kProteinCodeFieldNumber = 1;
  inline Elysia::Genome::Effect protein_code() const;
  inline void set_protein_code(Elysia::Genome::Effect value);
  
  // optional float density = 2;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 2;
  inline float density() const;
  inline void set_density(float value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int protein_code_;
  float density_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Protein* default_instance_;
};
// -------------------------------------------------------------------

class Proteins : public ::google::protobuf::Message {
 public:
  Proteins();
  virtual ~Proteins();
  
  Proteins(const Proteins& from);
  
  inline Proteins& operator=(const Proteins& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proteins& default_instance();
  void Swap(Proteins* other);
  
  // implements Message ----------------------------------------------
  
  Proteins* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proteins& from);
  void MergeFrom(const Proteins& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Elysia.Genome.Protein proteins = 1;
  inline int proteins_size() const;
  inline void clear_proteins();
  static const int kProteinsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >& proteins() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >* mutable_proteins();
  inline const ::Elysia::Genome::Protein& proteins(int index) const;
  inline ::Elysia::Genome::Protein* mutable_proteins(int index);
  inline ::Elysia::Genome::Protein* add_proteins();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein > proteins_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Proteins* default_instance_;
};
// -------------------------------------------------------------------

class TemporalBoundingBox : public ::google::protobuf::Message {
 public:
  TemporalBoundingBox();
  virtual ~TemporalBoundingBox();
  
  TemporalBoundingBox(const TemporalBoundingBox& from);
  
  inline TemporalBoundingBox& operator=(const TemporalBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemporalBoundingBox& default_instance();
  void Swap(TemporalBoundingBox* other);
  
  // implements Message ----------------------------------------------
  
  TemporalBoundingBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemporalBoundingBox& from);
  void MergeFrom(const TemporalBoundingBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float minx = 1;
  inline bool has_minx() const;
  inline void clear_minx();
  static const int kMinxFieldNumber = 1;
  inline float minx() const;
  inline void set_minx(float value);
  
  // required float maxx = 2;
  inline bool has_maxx() const;
  inline void clear_maxx();
  static const int kMaxxFieldNumber = 2;
  inline float maxx() const;
  inline void set_maxx(float value);
  
  // required float miny = 3;
  inline bool has_miny() const;
  inline void clear_miny();
  static const int kMinyFieldNumber = 3;
  inline float miny() const;
  inline void set_miny(float value);
  
  // required float maxy = 4;
  inline bool has_maxy() const;
  inline void clear_maxy();
  static const int kMaxyFieldNumber = 4;
  inline float maxy() const;
  inline void set_maxy(float value);
  
  // optional float minz = 5;
  inline bool has_minz() const;
  inline void clear_minz();
  static const int kMinzFieldNumber = 5;
  inline float minz() const;
  inline void set_minz(float value);
  
  // optional float maxz = 6;
  inline bool has_maxz() const;
  inline void clear_maxz();
  static const int kMaxzFieldNumber = 6;
  inline float maxz() const;
  inline void set_maxz(float value);
  
  // optional float mint = 7;
  inline bool has_mint() const;
  inline void clear_mint();
  static const int kMintFieldNumber = 7;
  inline float mint() const;
  inline void set_mint(float value);
  
  // optional float maxt = 8;
  inline bool has_maxt() const;
  inline void clear_maxt();
  static const int kMaxtFieldNumber = 8;
  inline float maxt() const;
  inline void set_maxt(float value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float minx_;
  float maxx_;
  float miny_;
  float maxy_;
  float minz_;
  float maxz_;
  float mint_;
  float maxt_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TemporalBoundingBox* default_instance_;
};
// -------------------------------------------------------------------

class Condition : public ::google::protobuf::Message {
 public:
  Condition();
  virtual ~Condition();
  
  Condition(const Condition& from);
  
  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Condition& default_instance();
  void Swap(Condition* other);
  
  // implements Message ----------------------------------------------
  
  Condition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Condition_Test Test;
  static const Test ANY_CONCENTRATION = Condition_Test_ANY_CONCENTRATION;
  static const Test CONCENTRATION_GREATER = Condition_Test_CONCENTRATION_GREATER;
  static const Test CONCENTRATION_LESS = Condition_Test_CONCENTRATION_LESS;
  static const Test NO_CONCENTRATION = Condition_Test_NO_CONCENTRATION;
  static inline bool Test_IsValid(int value) {
    return Condition_Test_IsValid(value);
  }
  static const Test Test_MIN =
    Condition_Test_Test_MIN;
  static const Test Test_MAX =
    Condition_Test_Test_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Test_descriptor() {
    return Condition_Test_descriptor();
  }
  static inline const ::std::string& Test_Name(Test value) {
    return Condition_Test_Name(value);
  }
  static inline bool Test_Parse(const ::std::string& name,
      Test* value) {
    return Condition_Test_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint64 protein = 1;
  inline bool has_protein() const;
  inline void clear_protein();
  static const int kProteinFieldNumber = 1;
  inline ::google::protobuf::uint64 protein() const;
  inline void set_protein(::google::protobuf::uint64 value);
  
  // optional .Elysia.Genome.Condition.Test test = 2;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 2;
  inline ::Elysia::Genome::Condition_Test test() const;
  inline void set_test(::Elysia::Genome::Condition_Test value);
  
  // optional float density = 3;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 3;
  inline float density() const;
  inline void set_density(float value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 protein_;
  int test_;
  float density_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Condition* default_instance_;
};
// -------------------------------------------------------------------

class ConditionClause : public ::google::protobuf::Message {
 public:
  ConditionClause();
  virtual ~ConditionClause();
  
  ConditionClause(const ConditionClause& from);
  
  inline ConditionClause& operator=(const ConditionClause& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionClause& default_instance();
  void Swap(ConditionClause* other);
  
  // implements Message ----------------------------------------------
  
  ConditionClause* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionClause& from);
  void MergeFrom(const ConditionClause& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Elysia.Genome.Condition disjunction = 1;
  inline int disjunction_size() const;
  inline void clear_disjunction();
  static const int kDisjunctionFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Condition >& disjunction() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Condition >* mutable_disjunction();
  inline const ::Elysia::Genome::Condition& disjunction(int index) const;
  inline ::Elysia::Genome::Condition* mutable_disjunction(int index);
  inline ::Elysia::Genome::Condition* add_disjunction();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Condition > disjunction_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConditionClause* default_instance_;
};
// -------------------------------------------------------------------

class Gene : public ::google::protobuf::Message {
 public:
  Gene();
  virtual ~Gene();
  
  Gene(const Gene& from);
  
  inline Gene& operator=(const Gene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gene& default_instance();
  void Swap(Gene* other);
  
  // implements Message ----------------------------------------------
  
  Gene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gene& from);
  void MergeFrom(const Gene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline float position() const;
  inline void set_position(float value);
  
  // repeated .Elysia.Genome.Protein external_protein = 2;
  inline int external_protein_size() const;
  inline void clear_external_protein();
  static const int kExternalProteinFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >& external_protein() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >* mutable_external_protein();
  inline const ::Elysia::Genome::Protein& external_protein(int index) const;
  inline ::Elysia::Genome::Protein* mutable_external_protein(int index);
  inline ::Elysia::Genome::Protein* add_external_protein();
  
  // repeated .Elysia.Genome.Protein internal_proteins = 3;
  inline int internal_proteins_size() const;
  inline void clear_internal_proteins();
  static const int kInternalProteinsFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >& internal_proteins() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >* mutable_internal_proteins();
  inline const ::Elysia::Genome::Protein& internal_proteins(int index) const;
  inline ::Elysia::Genome::Protein* mutable_internal_proteins(int index);
  inline ::Elysia::Genome::Protein* add_internal_proteins();
  
  // repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
  inline int bounds_size() const;
  inline void clear_bounds();
  static const int kBoundsFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >& bounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >* mutable_bounds();
  inline const ::Elysia::Genome::TemporalBoundingBox& bounds(int index) const;
  inline ::Elysia::Genome::TemporalBoundingBox* mutable_bounds(int index);
  inline ::Elysia::Genome::TemporalBoundingBox* add_bounds();
  
  // repeated .Elysia.Genome.ConditionClause conjunction = 5;
  inline int conjunction_size() const;
  inline void clear_conjunction();
  static const int kConjunctionFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::ConditionClause >& conjunction() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::ConditionClause >* mutable_conjunction();
  inline const ::Elysia::Genome::ConditionClause& conjunction(int index) const;
  inline ::Elysia::Genome::ConditionClause* mutable_conjunction(int index);
  inline ::Elysia::Genome::ConditionClause* add_conjunction();
  
  // repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
  inline int target_region_size() const;
  inline void clear_target_region();
  static const int kTargetRegionFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >& target_region() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >* mutable_target_region();
  inline const ::Elysia::Genome::TemporalBoundingBox& target_region(int index) const;
  inline ::Elysia::Genome::TemporalBoundingBox* mutable_target_region(int index);
  inline ::Elysia::Genome::TemporalBoundingBox* add_target_region();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float position_;
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein > external_protein_;
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein > internal_proteins_;
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox > bounds_;
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::ConditionClause > conjunction_;
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox > target_region_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Gene* default_instance_;
};
// -------------------------------------------------------------------

class Chromosome : public ::google::protobuf::Message {
 public:
  Chromosome();
  virtual ~Chromosome();
  
  Chromosome(const Chromosome& from);
  
  inline Chromosome& operator=(const Chromosome& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chromosome& default_instance();
  void Swap(Chromosome* other);
  
  // implements Message ----------------------------------------------
  
  Chromosome* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chromosome& from);
  void MergeFrom(const Chromosome& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Elysia.Genome.Gene genes = 1;
  inline int genes_size() const;
  inline void clear_genes();
  static const int kGenesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Gene >& genes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Gene >* mutable_genes();
  inline const ::Elysia::Genome::Gene& genes(int index) const;
  inline ::Elysia::Genome::Gene* mutable_genes(int index);
  inline ::Elysia::Genome::Gene* add_genes();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Gene > genes_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Chromosome* default_instance_;
};
// -------------------------------------------------------------------

class Genome : public ::google::protobuf::Message {
 public:
  Genome();
  virtual ~Genome();
  
  Genome(const Genome& from);
  
  inline Genome& operator=(const Genome& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Genome& default_instance();
  void Swap(Genome* other);
  
  // implements Message ----------------------------------------------
  
  Genome* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Genome& from);
  void MergeFrom(const Genome& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Elysia.Genome.Chromosome fathers = 1;
  inline bool has_fathers() const;
  inline void clear_fathers();
  static const int kFathersFieldNumber = 1;
  inline const ::Elysia::Genome::Chromosome& fathers() const;
  inline ::Elysia::Genome::Chromosome* mutable_fathers();
  
  // optional .Elysia.Genome.Chromosome mothers = 2;
  inline bool has_mothers() const;
  inline void clear_mothers();
  static const int kMothersFieldNumber = 2;
  inline const ::Elysia::Genome::Chromosome& mothers() const;
  inline ::Elysia::Genome::Chromosome* mutable_mothers();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Elysia::Genome::Chromosome* fathers_;
  ::Elysia::Genome::Chromosome* mothers_;
  friend void  protobuf_AddDesc_genome_2eproto();
  friend void protobuf_AssignDesc_genome_2eproto();
  friend void protobuf_ShutdownFile_genome_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Genome* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Protein

// optional .Elysia.Genome.Effect protein_code = 1;
inline bool Protein::has_protein_code() const {
  return _has_bit(0);
}
inline void Protein::clear_protein_code() {
  protein_code_ = 0;
  _clear_bit(0);
}
inline Elysia::Genome::Effect Protein::protein_code() const {
  return static_cast< Elysia::Genome::Effect >(protein_code_);
}
inline void Protein::set_protein_code(Elysia::Genome::Effect value) {
  GOOGLE_DCHECK(Elysia::Genome::Effect_IsValid(value));
  _set_bit(0);
  protein_code_ = value;
}

// optional float density = 2;
inline bool Protein::has_density() const {
  return _has_bit(1);
}
inline void Protein::clear_density() {
  density_ = 0;
  _clear_bit(1);
}
inline float Protein::density() const {
  return density_;
}
inline void Protein::set_density(float value) {
  _set_bit(1);
  density_ = value;
}

// -------------------------------------------------------------------

// Proteins

// repeated .Elysia.Genome.Protein proteins = 1;
inline int Proteins::proteins_size() const {
  return proteins_.size();
}
inline void Proteins::clear_proteins() {
  proteins_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >&
Proteins::proteins() const {
  return proteins_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >*
Proteins::mutable_proteins() {
  return &proteins_;
}
inline const ::Elysia::Genome::Protein& Proteins::proteins(int index) const {
  return proteins_.Get(index);
}
inline ::Elysia::Genome::Protein* Proteins::mutable_proteins(int index) {
  return proteins_.Mutable(index);
}
inline ::Elysia::Genome::Protein* Proteins::add_proteins() {
  return proteins_.Add();
}

// -------------------------------------------------------------------

// TemporalBoundingBox

// required float minx = 1;
inline bool TemporalBoundingBox::has_minx() const {
  return _has_bit(0);
}
inline void TemporalBoundingBox::clear_minx() {
  minx_ = 0;
  _clear_bit(0);
}
inline float TemporalBoundingBox::minx() const {
  return minx_;
}
inline void TemporalBoundingBox::set_minx(float value) {
  _set_bit(0);
  minx_ = value;
}

// required float maxx = 2;
inline bool TemporalBoundingBox::has_maxx() const {
  return _has_bit(1);
}
inline void TemporalBoundingBox::clear_maxx() {
  maxx_ = 0;
  _clear_bit(1);
}
inline float TemporalBoundingBox::maxx() const {
  return maxx_;
}
inline void TemporalBoundingBox::set_maxx(float value) {
  _set_bit(1);
  maxx_ = value;
}

// required float miny = 3;
inline bool TemporalBoundingBox::has_miny() const {
  return _has_bit(2);
}
inline void TemporalBoundingBox::clear_miny() {
  miny_ = 0;
  _clear_bit(2);
}
inline float TemporalBoundingBox::miny() const {
  return miny_;
}
inline void TemporalBoundingBox::set_miny(float value) {
  _set_bit(2);
  miny_ = value;
}

// required float maxy = 4;
inline bool TemporalBoundingBox::has_maxy() const {
  return _has_bit(3);
}
inline void TemporalBoundingBox::clear_maxy() {
  maxy_ = 0;
  _clear_bit(3);
}
inline float TemporalBoundingBox::maxy() const {
  return maxy_;
}
inline void TemporalBoundingBox::set_maxy(float value) {
  _set_bit(3);
  maxy_ = value;
}

// optional float minz = 5;
inline bool TemporalBoundingBox::has_minz() const {
  return _has_bit(4);
}
inline void TemporalBoundingBox::clear_minz() {
  minz_ = 0;
  _clear_bit(4);
}
inline float TemporalBoundingBox::minz() const {
  return minz_;
}
inline void TemporalBoundingBox::set_minz(float value) {
  _set_bit(4);
  minz_ = value;
}

// optional float maxz = 6;
inline bool TemporalBoundingBox::has_maxz() const {
  return _has_bit(5);
}
inline void TemporalBoundingBox::clear_maxz() {
  maxz_ = 0;
  _clear_bit(5);
}
inline float TemporalBoundingBox::maxz() const {
  return maxz_;
}
inline void TemporalBoundingBox::set_maxz(float value) {
  _set_bit(5);
  maxz_ = value;
}

// optional float mint = 7;
inline bool TemporalBoundingBox::has_mint() const {
  return _has_bit(6);
}
inline void TemporalBoundingBox::clear_mint() {
  mint_ = 0;
  _clear_bit(6);
}
inline float TemporalBoundingBox::mint() const {
  return mint_;
}
inline void TemporalBoundingBox::set_mint(float value) {
  _set_bit(6);
  mint_ = value;
}

// optional float maxt = 8;
inline bool TemporalBoundingBox::has_maxt() const {
  return _has_bit(7);
}
inline void TemporalBoundingBox::clear_maxt() {
  maxt_ = 0;
  _clear_bit(7);
}
inline float TemporalBoundingBox::maxt() const {
  return maxt_;
}
inline void TemporalBoundingBox::set_maxt(float value) {
  _set_bit(7);
  maxt_ = value;
}

// -------------------------------------------------------------------

// Condition

// optional uint64 protein = 1;
inline bool Condition::has_protein() const {
  return _has_bit(0);
}
inline void Condition::clear_protein() {
  protein_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Condition::protein() const {
  return protein_;
}
inline void Condition::set_protein(::google::protobuf::uint64 value) {
  _set_bit(0);
  protein_ = value;
}

// optional .Elysia.Genome.Condition.Test test = 2;
inline bool Condition::has_test() const {
  return _has_bit(1);
}
inline void Condition::clear_test() {
  test_ = 0;
  _clear_bit(1);
}
inline ::Elysia::Genome::Condition_Test Condition::test() const {
  return static_cast< ::Elysia::Genome::Condition_Test >(test_);
}
inline void Condition::set_test(::Elysia::Genome::Condition_Test value) {
  GOOGLE_DCHECK(::Elysia::Genome::Condition_Test_IsValid(value));
  _set_bit(1);
  test_ = value;
}

// optional float density = 3;
inline bool Condition::has_density() const {
  return _has_bit(2);
}
inline void Condition::clear_density() {
  density_ = 0;
  _clear_bit(2);
}
inline float Condition::density() const {
  return density_;
}
inline void Condition::set_density(float value) {
  _set_bit(2);
  density_ = value;
}

// -------------------------------------------------------------------

// ConditionClause

// repeated .Elysia.Genome.Condition disjunction = 1;
inline int ConditionClause::disjunction_size() const {
  return disjunction_.size();
}
inline void ConditionClause::clear_disjunction() {
  disjunction_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Condition >&
ConditionClause::disjunction() const {
  return disjunction_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Condition >*
ConditionClause::mutable_disjunction() {
  return &disjunction_;
}
inline const ::Elysia::Genome::Condition& ConditionClause::disjunction(int index) const {
  return disjunction_.Get(index);
}
inline ::Elysia::Genome::Condition* ConditionClause::mutable_disjunction(int index) {
  return disjunction_.Mutable(index);
}
inline ::Elysia::Genome::Condition* ConditionClause::add_disjunction() {
  return disjunction_.Add();
}

// -------------------------------------------------------------------

// Gene

// required float position = 1;
inline bool Gene::has_position() const {
  return _has_bit(0);
}
inline void Gene::clear_position() {
  position_ = 0;
  _clear_bit(0);
}
inline float Gene::position() const {
  return position_;
}
inline void Gene::set_position(float value) {
  _set_bit(0);
  position_ = value;
}

// repeated .Elysia.Genome.Protein external_protein = 2;
inline int Gene::external_protein_size() const {
  return external_protein_.size();
}
inline void Gene::clear_external_protein() {
  external_protein_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >&
Gene::external_protein() const {
  return external_protein_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >*
Gene::mutable_external_protein() {
  return &external_protein_;
}
inline const ::Elysia::Genome::Protein& Gene::external_protein(int index) const {
  return external_protein_.Get(index);
}
inline ::Elysia::Genome::Protein* Gene::mutable_external_protein(int index) {
  return external_protein_.Mutable(index);
}
inline ::Elysia::Genome::Protein* Gene::add_external_protein() {
  return external_protein_.Add();
}

// repeated .Elysia.Genome.Protein internal_proteins = 3;
inline int Gene::internal_proteins_size() const {
  return internal_proteins_.size();
}
inline void Gene::clear_internal_proteins() {
  internal_proteins_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >&
Gene::internal_proteins() const {
  return internal_proteins_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Protein >*
Gene::mutable_internal_proteins() {
  return &internal_proteins_;
}
inline const ::Elysia::Genome::Protein& Gene::internal_proteins(int index) const {
  return internal_proteins_.Get(index);
}
inline ::Elysia::Genome::Protein* Gene::mutable_internal_proteins(int index) {
  return internal_proteins_.Mutable(index);
}
inline ::Elysia::Genome::Protein* Gene::add_internal_proteins() {
  return internal_proteins_.Add();
}

// repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
inline int Gene::bounds_size() const {
  return bounds_.size();
}
inline void Gene::clear_bounds() {
  bounds_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >&
Gene::bounds() const {
  return bounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >*
Gene::mutable_bounds() {
  return &bounds_;
}
inline const ::Elysia::Genome::TemporalBoundingBox& Gene::bounds(int index) const {
  return bounds_.Get(index);
}
inline ::Elysia::Genome::TemporalBoundingBox* Gene::mutable_bounds(int index) {
  return bounds_.Mutable(index);
}
inline ::Elysia::Genome::TemporalBoundingBox* Gene::add_bounds() {
  return bounds_.Add();
}

// repeated .Elysia.Genome.ConditionClause conjunction = 5;
inline int Gene::conjunction_size() const {
  return conjunction_.size();
}
inline void Gene::clear_conjunction() {
  conjunction_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::ConditionClause >&
Gene::conjunction() const {
  return conjunction_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::ConditionClause >*
Gene::mutable_conjunction() {
  return &conjunction_;
}
inline const ::Elysia::Genome::ConditionClause& Gene::conjunction(int index) const {
  return conjunction_.Get(index);
}
inline ::Elysia::Genome::ConditionClause* Gene::mutable_conjunction(int index) {
  return conjunction_.Mutable(index);
}
inline ::Elysia::Genome::ConditionClause* Gene::add_conjunction() {
  return conjunction_.Add();
}

// repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
inline int Gene::target_region_size() const {
  return target_region_.size();
}
inline void Gene::clear_target_region() {
  target_region_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >&
Gene::target_region() const {
  return target_region_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::TemporalBoundingBox >*
Gene::mutable_target_region() {
  return &target_region_;
}
inline const ::Elysia::Genome::TemporalBoundingBox& Gene::target_region(int index) const {
  return target_region_.Get(index);
}
inline ::Elysia::Genome::TemporalBoundingBox* Gene::mutable_target_region(int index) {
  return target_region_.Mutable(index);
}
inline ::Elysia::Genome::TemporalBoundingBox* Gene::add_target_region() {
  return target_region_.Add();
}

// -------------------------------------------------------------------

// Chromosome

// repeated .Elysia.Genome.Gene genes = 1;
inline int Chromosome::genes_size() const {
  return genes_.size();
}
inline void Chromosome::clear_genes() {
  genes_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Gene >&
Chromosome::genes() const {
  return genes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Elysia::Genome::Gene >*
Chromosome::mutable_genes() {
  return &genes_;
}
inline const ::Elysia::Genome::Gene& Chromosome::genes(int index) const {
  return genes_.Get(index);
}
inline ::Elysia::Genome::Gene* Chromosome::mutable_genes(int index) {
  return genes_.Mutable(index);
}
inline ::Elysia::Genome::Gene* Chromosome::add_genes() {
  return genes_.Add();
}

// -------------------------------------------------------------------

// Genome

// optional .Elysia.Genome.Chromosome fathers = 1;
inline bool Genome::has_fathers() const {
  return _has_bit(0);
}
inline void Genome::clear_fathers() {
  if (fathers_ != NULL) fathers_->::Elysia::Genome::Chromosome::Clear();
  _clear_bit(0);
}
inline const ::Elysia::Genome::Chromosome& Genome::fathers() const {
  return fathers_ != NULL ? *fathers_ : *default_instance_->fathers_;
}
inline ::Elysia::Genome::Chromosome* Genome::mutable_fathers() {
  _set_bit(0);
  if (fathers_ == NULL) fathers_ = new ::Elysia::Genome::Chromosome;
  return fathers_;
}

// optional .Elysia.Genome.Chromosome mothers = 2;
inline bool Genome::has_mothers() const {
  return _has_bit(1);
}
inline void Genome::clear_mothers() {
  if (mothers_ != NULL) mothers_->::Elysia::Genome::Chromosome::Clear();
  _clear_bit(1);
}
inline const ::Elysia::Genome::Chromosome& Genome::mothers() const {
  return mothers_ != NULL ? *mothers_ : *default_instance_->mothers_;
}
inline ::Elysia::Genome::Chromosome* Genome::mutable_mothers() {
  _set_bit(1);
  if (mothers_ == NULL) mothers_ = new ::Elysia::Genome::Chromosome;
  return mothers_;
}


}  // namespace Genome
}  // namespace Elysia

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Elysia::Genome::Condition_Test>() {
  return ::Elysia::Genome::Condition_Test_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Elysia::Genome::Effect>() {
  return Elysia::Genome::Effect_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_genome_2eproto__INCLUDED
