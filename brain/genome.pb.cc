// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genome.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Elysia {
namespace Genome {

namespace {

const ::google::protobuf::Descriptor* Protein_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Protein_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proteins_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proteins_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemporalBoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemporalBoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Condition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Condition_Test_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConditionClause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionClause_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chromosome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chromosome_reflection_ = NULL;
const ::google::protobuf::Descriptor* Genome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Genome_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Effect_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_genome_2eproto() {
  protobuf_AddDesc_genome_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genome.proto");
  GOOGLE_CHECK(file != NULL);
  Protein_descriptor_ = file->message_type(0);
  static const int Protein_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protein, protein_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protein, density_),
  };
  Protein_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Protein_descriptor_,
      Protein::default_instance_,
      Protein_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protein, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protein, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Protein));
  Proteins_descriptor_ = file->message_type(1);
  static const int Proteins_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proteins, proteins_),
  };
  Proteins_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proteins_descriptor_,
      Proteins::default_instance_,
      Proteins_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proteins, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proteins, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proteins));
  TemporalBoundingBox_descriptor_ = file->message_type(2);
  static const int TemporalBoundingBox_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, minx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, maxx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, miny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, maxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, minz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, maxz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, mint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, maxt_),
  };
  TemporalBoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemporalBoundingBox_descriptor_,
      TemporalBoundingBox::default_instance_,
      TemporalBoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalBoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemporalBoundingBox));
  Condition_descriptor_ = file->message_type(3);
  static const int Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, protein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, density_),
  };
  Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Condition_descriptor_,
      Condition::default_instance_,
      Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Condition));
  Condition_Test_descriptor_ = Condition_descriptor_->enum_type(0);
  ConditionClause_descriptor_ = file->message_type(4);
  static const int ConditionClause_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionClause, disjunction_),
  };
  ConditionClause_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionClause_descriptor_,
      ConditionClause::default_instance_,
      ConditionClause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionClause, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionClause, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionClause));
  Gene_descriptor_ = file->message_type(5);
  static const int Gene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, external_protein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, internal_proteins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, conjunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, target_region_),
  };
  Gene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gene_descriptor_,
      Gene::default_instance_,
      Gene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gene));
  Chromosome_descriptor_ = file->message_type(6);
  static const int Chromosome_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, genes_),
  };
  Chromosome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chromosome_descriptor_,
      Chromosome::default_instance_,
      Chromosome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chromosome));
  Genome_descriptor_ = file->message_type(7);
  static const int Genome_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genome, fathers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genome, mothers_),
  };
  Genome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Genome_descriptor_,
      Genome::default_instance_,
      Genome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Genome));
  Effect_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genome_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Protein_descriptor_, &Protein::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proteins_descriptor_, &Proteins::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemporalBoundingBox_descriptor_, &TemporalBoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Condition_descriptor_, &Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionClause_descriptor_, &ConditionClause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gene_descriptor_, &Gene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chromosome_descriptor_, &Chromosome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Genome_descriptor_, &Genome::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_genome_2eproto() {
  delete Protein::default_instance_;
  delete Protein_reflection_;
  delete Proteins::default_instance_;
  delete Proteins_reflection_;
  delete TemporalBoundingBox::default_instance_;
  delete TemporalBoundingBox_reflection_;
  delete Condition::default_instance_;
  delete Condition_reflection_;
  delete ConditionClause::default_instance_;
  delete ConditionClause_reflection_;
  delete Gene::default_instance_;
  delete Gene_reflection_;
  delete Chromosome::default_instance_;
  delete Chromosome_reflection_;
  delete Genome::default_instance_;
  delete Genome_reflection_;
}

void protobuf_AddDesc_genome_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014genome.proto\022\rElysia.Genome\"G\n\007Protein"
    "\022+\n\014protein_code\030\001 \001(\0162\025.Elysia.Genome.E"
    "ffect\022\017\n\007density\030\002 \001(\002\"4\n\010Proteins\022(\n\010pr"
    "oteins\030\001 \003(\0132\026.Elysia.Genome.Protein\"\205\001\n"
    "\023TemporalBoundingBox\022\014\n\004minx\030\001 \002(\002\022\014\n\004ma"
    "xx\030\002 \002(\002\022\014\n\004miny\030\003 \002(\002\022\014\n\004maxy\030\004 \002(\002\022\014\n\004"
    "minz\030\005 \001(\002\022\014\n\004maxz\030\006 \001(\002\022\014\n\004mint\030\007 \001(\002\022\014"
    "\n\004maxt\030\010 \001(\002\"\302\001\n\tCondition\022\017\n\007protein\030\001 "
    "\001(\004\022+\n\004test\030\002 \001(\0162\035.Elysia.Genome.Condit"
    "ion.Test\022\017\n\007density\030\003 \001(\002\"f\n\004Test\022\025\n\021ANY"
    "_CONCENTRATION\020\000\022\031\n\025CONCENTRATION_GREATE"
    "R\020\001\022\026\n\022CONCENTRATION_LESS\020\002\022\024\n\020NO_CONCEN"
    "TRATION\020\003\"@\n\017ConditionClause\022-\n\013disjunct"
    "ion\030\001 \003(\0132\030.Elysia.Genome.Condition\"\241\002\n\004"
    "Gene\022\020\n\010position\030\001 \002(\002\0220\n\020external_prote"
    "in\030\002 \003(\0132\026.Elysia.Genome.Protein\0221\n\021inte"
    "rnal_proteins\030\003 \003(\0132\026.Elysia.Genome.Prot"
    "ein\0222\n\006bounds\030\004 \003(\0132\".Elysia.Genome.Temp"
    "oralBoundingBox\0223\n\013conjunction\030\005 \003(\0132\036.E"
    "lysia.Genome.ConditionClause\0229\n\rtarget_r"
    "egion\030\006 \003(\0132\".Elysia.Genome.TemporalBoun"
    "dingBox\"0\n\nChromosome\022\"\n\005genes\030\001 \003(\0132\023.E"
    "lysia.Genome.Gene\"`\n\006Genome\022*\n\007fathers\030\001"
    " \001(\0132\031.Elysia.Genome.Chromosome\022*\n\007mothe"
    "rs\030\002 \001(\0132\031.Elysia.Genome.Chromosome*\206\002\n\006"
    "Effect\022\n\n\006CUSTOM\020\000\022\r\n\tGROW_LEAF\020\001\022\017\n\013GRO"
    "W_NEURON\020\002\022\024\n\020BASE_BRANCHINESS\020\003\022\023\n\017TIP_"
    "BRANCHINESS\020\004\022\022\n\016BASE_THRESHOLD\020\005\022\021\n\rTIP"
    "_THRESHOLD\020\006\022\016\n\nTREE_DEPTH\020\007\022\017\n\013FIRING_T"
    "IME\020\010\022\024\n\020RECEPTIVITY_TIME\020\t\022\033\n\027LEARNING_"
    "RESPONSIVENESS\020\014\022\016\n\nINHIBITION\020\r\022\032\n\026AGGR"
    "ESSIVE_DEVELOPMENT\020\016", 1260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genome.proto", &protobuf_RegisterTypes);
  Protein::default_instance_ = new Protein();
  Proteins::default_instance_ = new Proteins();
  TemporalBoundingBox::default_instance_ = new TemporalBoundingBox();
  Condition::default_instance_ = new Condition();
  ConditionClause::default_instance_ = new ConditionClause();
  Gene::default_instance_ = new Gene();
  Chromosome::default_instance_ = new Chromosome();
  Genome::default_instance_ = new Genome();
  Protein::default_instance_->InitAsDefaultInstance();
  Proteins::default_instance_->InitAsDefaultInstance();
  TemporalBoundingBox::default_instance_->InitAsDefaultInstance();
  Condition::default_instance_->InitAsDefaultInstance();
  ConditionClause::default_instance_->InitAsDefaultInstance();
  Gene::default_instance_->InitAsDefaultInstance();
  Chromosome::default_instance_->InitAsDefaultInstance();
  Genome::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genome_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genome_2eproto {
  StaticDescriptorInitializer_genome_2eproto() {
    protobuf_AddDesc_genome_2eproto();
  }
} static_descriptor_initializer_genome_2eproto_;

const ::google::protobuf::EnumDescriptor* Effect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Effect_descriptor_;
}
bool Effect_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Protein::kProteinCodeFieldNumber;
const int Protein::kDensityFieldNumber;
#endif  // !_MSC_VER

Protein::Protein() {
  SharedCtor();
}

void Protein::InitAsDefaultInstance() {
}

Protein::Protein(const Protein& from) {
  SharedCtor();
  MergeFrom(from);
}

void Protein::SharedCtor() {
  _cached_size_ = 0;
  protein_code_ = 0;
  density_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Protein::~Protein() {
  SharedDtor();
}

void Protein::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Protein::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protein_descriptor_;
}

const Protein& Protein::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Protein* Protein::default_instance_ = NULL;

Protein* Protein::New() const {
  return new Protein;
}

void Protein::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protein_code_ = 0;
    density_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Protein::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Elysia.Genome.Effect protein_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Elysia::Genome::Effect_IsValid(value)) {
          set_protein_code(static_cast< Elysia::Genome::Effect >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(21)) goto parse_density;
        break;
      }
      
      // optional float density = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &density_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Protein::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Protein::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Elysia.Genome.Effect protein_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protein_code(), output);
  }
  
  // optional float density = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->density(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Protein::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Elysia.Genome.Effect protein_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protein_code(), target);
  }
  
  // optional float density = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->density(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Protein::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Elysia.Genome.Effect protein_code = 1;
    if (has_protein_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protein_code());
    }
    
    // optional float density = 2;
    if (has_density()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Protein::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Protein* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Protein*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Protein::MergeFrom(const Protein& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_protein_code(from.protein_code());
    }
    if (from._has_bit(1)) {
      set_density(from.density());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Protein::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Protein::CopyFrom(const Protein& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protein::IsInitialized() const {
  
  return true;
}

void Protein::Swap(Protein* other) {
  if (other != this) {
    std::swap(protein_code_, other->protein_code_);
    std::swap(density_, other->density_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Protein::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Protein_descriptor_;
  metadata.reflection = Protein_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proteins::kProteinsFieldNumber;
#endif  // !_MSC_VER

Proteins::Proteins() {
  SharedCtor();
}

void Proteins::InitAsDefaultInstance() {
}

Proteins::Proteins(const Proteins& from) {
  SharedCtor();
  MergeFrom(from);
}

void Proteins::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proteins::~Proteins() {
  SharedDtor();
}

void Proteins::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Proteins::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proteins_descriptor_;
}

const Proteins& Proteins::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Proteins* Proteins::default_instance_ = NULL;

Proteins* Proteins::New() const {
  return new Proteins;
}

void Proteins::Clear() {
  proteins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proteins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Elysia.Genome.Protein proteins = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proteins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_proteins()));
        if (input->ExpectTag(10)) goto parse_proteins;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proteins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Proteins::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Elysia.Genome.Protein proteins = 1;
  for (int i = 0; i < this->proteins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->proteins(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proteins::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Elysia.Genome.Protein proteins = 1;
  for (int i = 0; i < this->proteins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proteins(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proteins::ByteSize() const {
  int total_size = 0;
  
  // repeated .Elysia.Genome.Protein proteins = 1;
  total_size += 1 * this->proteins_size();
  for (int i = 0; i < this->proteins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proteins(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Proteins::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proteins* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proteins*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proteins::MergeFrom(const Proteins& from) {
  GOOGLE_CHECK_NE(&from, this);
  proteins_.MergeFrom(from.proteins_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proteins::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proteins::CopyFrom(const Proteins& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proteins::IsInitialized() const {
  
  return true;
}

void Proteins::Swap(Proteins* other) {
  if (other != this) {
    proteins_.Swap(&other->proteins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proteins::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proteins_descriptor_;
  metadata.reflection = Proteins_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemporalBoundingBox::kMinxFieldNumber;
const int TemporalBoundingBox::kMaxxFieldNumber;
const int TemporalBoundingBox::kMinyFieldNumber;
const int TemporalBoundingBox::kMaxyFieldNumber;
const int TemporalBoundingBox::kMinzFieldNumber;
const int TemporalBoundingBox::kMaxzFieldNumber;
const int TemporalBoundingBox::kMintFieldNumber;
const int TemporalBoundingBox::kMaxtFieldNumber;
#endif  // !_MSC_VER

TemporalBoundingBox::TemporalBoundingBox() {
  SharedCtor();
}

void TemporalBoundingBox::InitAsDefaultInstance() {
}

TemporalBoundingBox::TemporalBoundingBox(const TemporalBoundingBox& from) {
  SharedCtor();
  MergeFrom(from);
}

void TemporalBoundingBox::SharedCtor() {
  _cached_size_ = 0;
  minx_ = 0;
  maxx_ = 0;
  miny_ = 0;
  maxy_ = 0;
  minz_ = 0;
  maxz_ = 0;
  mint_ = 0;
  maxt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemporalBoundingBox::~TemporalBoundingBox() {
  SharedDtor();
}

void TemporalBoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TemporalBoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemporalBoundingBox_descriptor_;
}

const TemporalBoundingBox& TemporalBoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

TemporalBoundingBox* TemporalBoundingBox::default_instance_ = NULL;

TemporalBoundingBox* TemporalBoundingBox::New() const {
  return new TemporalBoundingBox;
}

void TemporalBoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minx_ = 0;
    maxx_ = 0;
    miny_ = 0;
    maxy_ = 0;
    minz_ = 0;
    maxz_ = 0;
    mint_ = 0;
    maxt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemporalBoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float minx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &minx_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_maxx;
        break;
      }
      
      // required float maxx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_maxx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &maxx_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_miny;
        break;
      }
      
      // required float miny = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_miny:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &miny_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_maxy;
        break;
      }
      
      // required float maxy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_maxy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &maxy_));
        _set_bit(3);
        if (input->ExpectTag(45)) goto parse_minz;
        break;
      }
      
      // optional float minz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_minz:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &minz_));
        _set_bit(4);
        if (input->ExpectTag(53)) goto parse_maxz;
        break;
      }
      
      // optional float maxz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_maxz:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &maxz_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_mint;
        break;
      }
      
      // optional float mint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_mint:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &mint_));
        _set_bit(6);
        if (input->ExpectTag(69)) goto parse_maxt;
        break;
      }
      
      // optional float maxt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_maxt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &maxt_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TemporalBoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TemporalBoundingBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float minx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->minx(), output);
  }
  
  // required float maxx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxx(), output);
  }
  
  // required float miny = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->miny(), output);
  }
  
  // required float maxy = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxy(), output);
  }
  
  // optional float minz = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->minz(), output);
  }
  
  // optional float maxz = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxz(), output);
  }
  
  // optional float mint = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mint(), output);
  }
  
  // optional float maxt = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TemporalBoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float minx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->minx(), target);
  }
  
  // required float maxx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxx(), target);
  }
  
  // required float miny = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->miny(), target);
  }
  
  // required float maxy = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxy(), target);
  }
  
  // optional float minz = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->minz(), target);
  }
  
  // optional float maxz = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxz(), target);
  }
  
  // optional float mint = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mint(), target);
  }
  
  // optional float maxt = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TemporalBoundingBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float minx = 1;
    if (has_minx()) {
      total_size += 1 + 4;
    }
    
    // required float maxx = 2;
    if (has_maxx()) {
      total_size += 1 + 4;
    }
    
    // required float miny = 3;
    if (has_miny()) {
      total_size += 1 + 4;
    }
    
    // required float maxy = 4;
    if (has_maxy()) {
      total_size += 1 + 4;
    }
    
    // optional float minz = 5;
    if (has_minz()) {
      total_size += 1 + 4;
    }
    
    // optional float maxz = 6;
    if (has_maxz()) {
      total_size += 1 + 4;
    }
    
    // optional float mint = 7;
    if (has_mint()) {
      total_size += 1 + 4;
    }
    
    // optional float maxt = 8;
    if (has_maxt()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TemporalBoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemporalBoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemporalBoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemporalBoundingBox::MergeFrom(const TemporalBoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_minx(from.minx());
    }
    if (from._has_bit(1)) {
      set_maxx(from.maxx());
    }
    if (from._has_bit(2)) {
      set_miny(from.miny());
    }
    if (from._has_bit(3)) {
      set_maxy(from.maxy());
    }
    if (from._has_bit(4)) {
      set_minz(from.minz());
    }
    if (from._has_bit(5)) {
      set_maxz(from.maxz());
    }
    if (from._has_bit(6)) {
      set_mint(from.mint());
    }
    if (from._has_bit(7)) {
      set_maxt(from.maxt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemporalBoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemporalBoundingBox::CopyFrom(const TemporalBoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporalBoundingBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TemporalBoundingBox::Swap(TemporalBoundingBox* other) {
  if (other != this) {
    std::swap(minx_, other->minx_);
    std::swap(maxx_, other->maxx_);
    std::swap(miny_, other->miny_);
    std::swap(maxy_, other->maxy_);
    std::swap(minz_, other->minz_);
    std::swap(maxz_, other->maxz_);
    std::swap(mint_, other->mint_);
    std::swap(maxt_, other->maxt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemporalBoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemporalBoundingBox_descriptor_;
  metadata.reflection = TemporalBoundingBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Condition_Test_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_Test_descriptor_;
}
bool Condition_Test_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Condition_Test Condition::ANY_CONCENTRATION;
const Condition_Test Condition::CONCENTRATION_GREATER;
const Condition_Test Condition::CONCENTRATION_LESS;
const Condition_Test Condition::NO_CONCENTRATION;
const Condition_Test Condition::Test_MIN;
const Condition_Test Condition::Test_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Condition::kProteinFieldNumber;
const int Condition::kTestFieldNumber;
const int Condition::kDensityFieldNumber;
#endif  // !_MSC_VER

Condition::Condition() {
  SharedCtor();
}

void Condition::InitAsDefaultInstance() {
}

Condition::Condition(const Condition& from) {
  SharedCtor();
  MergeFrom(from);
}

void Condition::SharedCtor() {
  _cached_size_ = 0;
  protein_ = GOOGLE_ULONGLONG(0);
  test_ = 0;
  density_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Condition::~Condition() {
  SharedDtor();
}

void Condition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_descriptor_;
}

const Condition& Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Condition* Condition::default_instance_ = NULL;

Condition* Condition::New() const {
  return new Condition;
}

void Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protein_ = GOOGLE_ULONGLONG(0);
    test_ = 0;
    density_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 protein = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &protein_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_test;
        break;
      }
      
      // optional .Elysia.Genome.Condition.Test test = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Elysia::Genome::Condition_Test_IsValid(value)) {
          set_test(static_cast< ::Elysia::Genome::Condition_Test >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(29)) goto parse_density;
        break;
      }
      
      // optional float density = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &density_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Condition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 protein = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->protein(), output);
  }
  
  // optional .Elysia.Genome.Condition.Test test = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->test(), output);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->density(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 protein = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->protein(), target);
  }
  
  // optional .Elysia.Genome.Condition.Test test = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->test(), target);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->density(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Condition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 protein = 1;
    if (has_protein()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protein());
    }
    
    // optional .Elysia.Genome.Condition.Test test = 2;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test());
    }
    
    // optional float density = 3;
    if (has_density()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_protein(from.protein());
    }
    if (from._has_bit(1)) {
      set_test(from.test());
    }
    if (from._has_bit(2)) {
      set_density(from.density());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  
  return true;
}

void Condition::Swap(Condition* other) {
  if (other != this) {
    std::swap(protein_, other->protein_);
    std::swap(test_, other->test_);
    std::swap(density_, other->density_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Condition_descriptor_;
  metadata.reflection = Condition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionClause::kDisjunctionFieldNumber;
#endif  // !_MSC_VER

ConditionClause::ConditionClause() {
  SharedCtor();
}

void ConditionClause::InitAsDefaultInstance() {
}

ConditionClause::ConditionClause(const ConditionClause& from) {
  SharedCtor();
  MergeFrom(from);
}

void ConditionClause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionClause::~ConditionClause() {
  SharedDtor();
}

void ConditionClause::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ConditionClause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionClause_descriptor_;
}

const ConditionClause& ConditionClause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

ConditionClause* ConditionClause::default_instance_ = NULL;

ConditionClause* ConditionClause::New() const {
  return new ConditionClause;
}

void ConditionClause::Clear() {
  disjunction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionClause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Elysia.Genome.Condition disjunction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disjunction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_disjunction()));
        if (input->ExpectTag(10)) goto parse_disjunction;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionClause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ConditionClause::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Elysia.Genome.Condition disjunction = 1;
  for (int i = 0; i < this->disjunction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->disjunction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionClause::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Elysia.Genome.Condition disjunction = 1;
  for (int i = 0; i < this->disjunction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->disjunction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionClause::ByteSize() const {
  int total_size = 0;
  
  // repeated .Elysia.Genome.Condition disjunction = 1;
  total_size += 1 * this->disjunction_size();
  for (int i = 0; i < this->disjunction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disjunction(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ConditionClause::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionClause* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionClause*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionClause::MergeFrom(const ConditionClause& from) {
  GOOGLE_CHECK_NE(&from, this);
  disjunction_.MergeFrom(from.disjunction_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionClause::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionClause::CopyFrom(const ConditionClause& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionClause::IsInitialized() const {
  
  return true;
}

void ConditionClause::Swap(ConditionClause* other) {
  if (other != this) {
    disjunction_.Swap(&other->disjunction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionClause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionClause_descriptor_;
  metadata.reflection = ConditionClause_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gene::kPositionFieldNumber;
const int Gene::kExternalProteinFieldNumber;
const int Gene::kInternalProteinsFieldNumber;
const int Gene::kBoundsFieldNumber;
const int Gene::kConjunctionFieldNumber;
const int Gene::kTargetRegionFieldNumber;
#endif  // !_MSC_VER

Gene::Gene() {
  SharedCtor();
}

void Gene::InitAsDefaultInstance() {
}

Gene::Gene(const Gene& from) {
  SharedCtor();
  MergeFrom(from);
}

void Gene::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gene::~Gene() {
  SharedDtor();
}

void Gene::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Gene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gene_descriptor_;
}

const Gene& Gene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Gene* Gene::default_instance_ = NULL;

Gene* Gene::New() const {
  return new Gene;
}

void Gene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
  }
  external_protein_.Clear();
  internal_proteins_.Clear();
  bounds_.Clear();
  conjunction_.Clear();
  target_region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &position_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_external_protein;
        break;
      }
      
      // repeated .Elysia.Genome.Protein external_protein = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_external_protein:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_external_protein()));
        if (input->ExpectTag(18)) goto parse_external_protein;
        if (input->ExpectTag(26)) goto parse_internal_proteins;
        break;
      }
      
      // repeated .Elysia.Genome.Protein internal_proteins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_internal_proteins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_internal_proteins()));
        if (input->ExpectTag(26)) goto parse_internal_proteins;
        if (input->ExpectTag(34)) goto parse_bounds;
        break;
      }
      
      // repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bounds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_bounds()));
        if (input->ExpectTag(34)) goto parse_bounds;
        if (input->ExpectTag(42)) goto parse_conjunction;
        break;
      }
      
      // repeated .Elysia.Genome.ConditionClause conjunction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_conjunction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_conjunction()));
        if (input->ExpectTag(42)) goto parse_conjunction;
        if (input->ExpectTag(50)) goto parse_target_region;
        break;
      }
      
      // repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_target_region:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_target_region()));
        if (input->ExpectTag(50)) goto parse_target_region;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Gene::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float position = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }
  
  // repeated .Elysia.Genome.Protein external_protein = 2;
  for (int i = 0; i < this->external_protein_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->external_protein(i), output);
  }
  
  // repeated .Elysia.Genome.Protein internal_proteins = 3;
  for (int i = 0; i < this->internal_proteins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->internal_proteins(i), output);
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
  for (int i = 0; i < this->bounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->bounds(i), output);
  }
  
  // repeated .Elysia.Genome.ConditionClause conjunction = 5;
  for (int i = 0; i < this->conjunction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->conjunction(i), output);
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
  for (int i = 0; i < this->target_region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->target_region(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float position = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }
  
  // repeated .Elysia.Genome.Protein external_protein = 2;
  for (int i = 0; i < this->external_protein_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->external_protein(i), target);
  }
  
  // repeated .Elysia.Genome.Protein internal_proteins = 3;
  for (int i = 0; i < this->internal_proteins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->internal_proteins(i), target);
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
  for (int i = 0; i < this->bounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bounds(i), target);
  }
  
  // repeated .Elysia.Genome.ConditionClause conjunction = 5;
  for (int i = 0; i < this->conjunction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conjunction(i), target);
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
  for (int i = 0; i < this->target_region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->target_region(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .Elysia.Genome.Protein external_protein = 2;
  total_size += 1 * this->external_protein_size();
  for (int i = 0; i < this->external_protein_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_protein(i));
  }
  
  // repeated .Elysia.Genome.Protein internal_proteins = 3;
  total_size += 1 * this->internal_proteins_size();
  for (int i = 0; i < this->internal_proteins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_proteins(i));
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox bounds = 4;
  total_size += 1 * this->bounds_size();
  for (int i = 0; i < this->bounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bounds(i));
  }
  
  // repeated .Elysia.Genome.ConditionClause conjunction = 5;
  total_size += 1 * this->conjunction_size();
  for (int i = 0; i < this->conjunction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conjunction(i));
  }
  
  // repeated .Elysia.Genome.TemporalBoundingBox target_region = 6;
  total_size += 1 * this->target_region_size();
  for (int i = 0; i < this->target_region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_region(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Gene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gene::MergeFrom(const Gene& from) {
  GOOGLE_CHECK_NE(&from, this);
  external_protein_.MergeFrom(from.external_protein_);
  internal_proteins_.MergeFrom(from.internal_proteins_);
  bounds_.MergeFrom(from.bounds_);
  conjunction_.MergeFrom(from.conjunction_);
  target_region_.MergeFrom(from.target_region_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gene::CopyFrom(const Gene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < bounds_size(); i++) {
    if (!this->bounds(i).IsInitialized()) return false;
  }
  for (int i = 0; i < target_region_size(); i++) {
    if (!this->target_region(i).IsInitialized()) return false;
  }
  return true;
}

void Gene::Swap(Gene* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    external_protein_.Swap(&other->external_protein_);
    internal_proteins_.Swap(&other->internal_proteins_);
    bounds_.Swap(&other->bounds_);
    conjunction_.Swap(&other->conjunction_);
    target_region_.Swap(&other->target_region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gene_descriptor_;
  metadata.reflection = Gene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chromosome::kGenesFieldNumber;
#endif  // !_MSC_VER

Chromosome::Chromosome() {
  SharedCtor();
}

void Chromosome::InitAsDefaultInstance() {
}

Chromosome::Chromosome(const Chromosome& from) {
  SharedCtor();
  MergeFrom(from);
}

void Chromosome::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chromosome::~Chromosome() {
  SharedDtor();
}

void Chromosome::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Chromosome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chromosome_descriptor_;
}

const Chromosome& Chromosome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Chromosome* Chromosome::default_instance_ = NULL;

Chromosome* Chromosome::New() const {
  return new Chromosome;
}

void Chromosome::Clear() {
  genes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chromosome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Elysia.Genome.Gene genes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_genes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_genes()));
        if (input->ExpectTag(10)) goto parse_genes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chromosome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Chromosome::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Elysia.Genome.Gene genes = 1;
  for (int i = 0; i < this->genes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->genes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chromosome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Elysia.Genome.Gene genes = 1;
  for (int i = 0; i < this->genes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->genes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chromosome::ByteSize() const {
  int total_size = 0;
  
  // repeated .Elysia.Genome.Gene genes = 1;
  total_size += 1 * this->genes_size();
  for (int i = 0; i < this->genes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Chromosome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chromosome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chromosome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chromosome::MergeFrom(const Chromosome& from) {
  GOOGLE_CHECK_NE(&from, this);
  genes_.MergeFrom(from.genes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chromosome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chromosome::CopyFrom(const Chromosome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chromosome::IsInitialized() const {
  
  for (int i = 0; i < genes_size(); i++) {
    if (!this->genes(i).IsInitialized()) return false;
  }
  return true;
}

void Chromosome::Swap(Chromosome* other) {
  if (other != this) {
    genes_.Swap(&other->genes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chromosome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chromosome_descriptor_;
  metadata.reflection = Chromosome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Genome::kFathersFieldNumber;
const int Genome::kMothersFieldNumber;
#endif  // !_MSC_VER

Genome::Genome() {
  SharedCtor();
}

void Genome::InitAsDefaultInstance() {
  fathers_ = const_cast< ::Elysia::Genome::Chromosome*>(&::Elysia::Genome::Chromosome::default_instance());
  mothers_ = const_cast< ::Elysia::Genome::Chromosome*>(&::Elysia::Genome::Chromosome::default_instance());
}

Genome::Genome(const Genome& from) {
  SharedCtor();
  MergeFrom(from);
}

void Genome::SharedCtor() {
  _cached_size_ = 0;
  fathers_ = NULL;
  mothers_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Genome::~Genome() {
  SharedDtor();
}

void Genome::SharedDtor() {
  if (this != default_instance_) {
    delete fathers_;
    delete mothers_;
  }
}

const ::google::protobuf::Descriptor* Genome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Genome_descriptor_;
}

const Genome& Genome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genome_2eproto();  return *default_instance_;
}

Genome* Genome::default_instance_ = NULL;

Genome* Genome::New() const {
  return new Genome;
}

void Genome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (fathers_ != NULL) fathers_->::Elysia::Genome::Chromosome::Clear();
    }
    if (_has_bit(1)) {
      if (mothers_ != NULL) mothers_->::Elysia::Genome::Chromosome::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Genome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Elysia.Genome.Chromosome fathers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_fathers()));
        if (input->ExpectTag(18)) goto parse_mothers;
        break;
      }
      
      // optional .Elysia.Genome.Chromosome mothers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mothers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_mothers()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Genome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Genome::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Elysia.Genome.Chromosome fathers = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->fathers(), output);
  }
  
  // optional .Elysia.Genome.Chromosome mothers = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->mothers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Genome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Elysia.Genome.Chromosome fathers = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fathers(), target);
  }
  
  // optional .Elysia.Genome.Chromosome mothers = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mothers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Genome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Elysia.Genome.Chromosome fathers = 1;
    if (has_fathers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fathers());
    }
    
    // optional .Elysia.Genome.Chromosome mothers = 2;
    if (has_mothers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mothers());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Genome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Genome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Genome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Genome::MergeFrom(const Genome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_fathers()->::Elysia::Genome::Chromosome::MergeFrom(from.fathers());
    }
    if (from._has_bit(1)) {
      mutable_mothers()->::Elysia::Genome::Chromosome::MergeFrom(from.mothers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Genome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genome::CopyFrom(const Genome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genome::IsInitialized() const {
  
  if (has_fathers()) {
    if (!this->fathers().IsInitialized()) return false;
  }
  if (has_mothers()) {
    if (!this->mothers().IsInitialized()) return false;
  }
  return true;
}

void Genome::Swap(Genome* other) {
  if (other != this) {
    std::swap(fathers_, other->fathers_);
    std::swap(mothers_, other->mothers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Genome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Genome_descriptor_;
  metadata.reflection = Genome_reflection_;
  return metadata;
}


}  // namespace Genome
}  // namespace Elysia
